Using libIDL for Win32
~~~~~~~~~~~~~~~~~~~~~~

Win32 libIDL support is mostly here, but currently requires the use of
IDL_parse_filename_with_input, since there is no C preprocessor
generally available under Windows. To compile this, you will also need
to obtain GLib and pkg-config for Windows, which you should be able to
obtain from http://www.gtk.org/download-windows.html

Building
~~~~~~~~

You can build either with the GNU toolchain (mingw) or one of
Microsoft's compiler (any recent version should work). With mingw you
use the normal configure script and make. pkg-config is used in the
normal way to find out the compiler command-line options.

With Microsoft's compiler you run nmake -f Makefile.msc. Also the
Makefile.msc uses pkg-config to find out the compiler flags. The
commands to use pkg-config output in the Makefile.msc are somewhat
convoluted, but nothing simpler seems to work, given the lack of
backticks in cmd.exe or something similar in nmake. If you use an
older Microsoft compiler you will have to edit out the
manifest-related commands from Makefile.msc.

When built with gcc libIDL will also use gcc as a preprocessor (it
will run "gcc -E -P"), and when built with Microsoft's compiler it
will correspondingly use the Microsoft compiler as preprocessort (it
will run "cl -EP"). Thus users of libIDL, especially users of the
ORBit2 IDL compiler orbit-idl-2, need to make sure that they have the
necessary folders in PATH so that gcc or cl are found when orbit-idl-2
is run.

Using the Library
~~~~~~~~~~~~~~~~~

After building, all you need are the files IDL.h and the DLL and
related import library.  Place the header in a place where it can be
found with libIDL/IDL.h, the DLL somewhere in PATH, and the import
library somewhere where your compiler will find it.

--
Andrew T. Veliath <andrewtv@usa.net>
Tor Lillqvist <tml@iki.fi>
